# Generated by Django 5.0.8 on 2025-09-18 03:05

import datetime
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PersonIdentity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("middle_name", models.CharField(blank=True, max_length=100)),
                ("birth_date", models.DateField()),
                ("birth_place", models.CharField(max_length=200)),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Masculin"), ("F", "Féminin"), ("O", "Autre")],
                        max_length=1,
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        choices=[
                            ("SINGLE", "Célibataire"),
                            ("MARRIED", "Marié(e)"),
                            ("DIVORCED", "Divorcé(e)"),
                            ("WIDOWED", "Veuf/Veuve"),
                            ("SEPARATED", "Séparé(e)"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "national_id",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de CNI doit contenir exactement 12 chiffres",
                                regex="^\\d{12}$",
                            )
                        ],
                    ),
                ),
                (
                    "passport_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "birth_certificate_number",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format: +241XXXXXXXX", regex="^\\+241\\d{8}$"
                            )
                        ],
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("address_line1", models.CharField(max_length=200)),
                ("address_line2", models.CharField(blank=True, max_length=200)),
                ("city", models.CharField(max_length=100)),
                ("province", models.CharField(max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=10)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("location_accuracy", models.FloatField(blank=True, null=True)),
                ("occupation", models.CharField(blank=True, max_length=200)),
                ("education_level", models.CharField(blank=True, max_length=100)),
                (
                    "monthly_income",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("household_size", models.PositiveIntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_validated", models.BooleanField(default=False)),
                ("validated_at", models.DateTimeField(blank=True, null=True)),
                ("rbpp_synchronized", models.BooleanField(default=False)),
                ("rbpp_last_sync", models.DateTimeField(blank=True, null=True)),
                ("rbpp_data", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_identities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="validated_identities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "identity_persons",
            },
        ),
        migrations.CreateModel(
            name="FamilyRelationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("PARENT", "Parent"),
                            ("CHILD", "Enfant"),
                            ("SPOUSE", "Époux/Épouse"),
                            ("SIBLING", "Frère/Sœur"),
                            ("GRANDPARENT", "Grand-parent"),
                            ("GRANDCHILD", "Petit-enfant"),
                            ("UNCLE_AUNT", "Oncle/Tante"),
                            ("NEPHEW_NIECE", "Neveu/Nièce"),
                            ("COUSIN", "Cousin(e)"),
                            ("GUARDIAN", "Tuteur légal"),
                            ("WARD", "Pupille"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "supporting_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_relationships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_as_person1",
                        to="identity_app.personidentity",
                    ),
                ),
                (
                    "person2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_as_person2",
                        to="identity_app.personidentity",
                    ),
                ),
            ],
            options={
                "db_table": "identity_family_relationships",
            },
        ),
        migrations.CreateModel(
            name="DeduplicationCandidate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "similarity_score",
                    models.DecimalField(decimal_places=4, max_digits=5),
                ),
                (
                    "match_type",
                    models.CharField(
                        choices=[
                            ("EXACT", "Correspondance exacte"),
                            ("HIGH", "Probabilité élevée"),
                            ("MEDIUM", "Probabilité moyenne"),
                            ("LOW", "Probabilité faible"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "matching_fields",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "conflicting_fields",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        size=None,
                    ),
                ),
                ("confidence_factors", models.JSONField(default=dict)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("CONFIRMED", "Confirmé comme doublon"),
                            ("REJECTED", "Rejeté"),
                            ("MERGED", "Fusionné"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("detected_at", models.DateTimeField(auto_now_add=True)),
                ("algorithm_version", models.CharField(max_length=20)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dedup_as_person1",
                        to="identity_app.personidentity",
                    ),
                ),
                (
                    "person2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dedup_as_person2",
                        to="identity_app.personidentity",
                    ),
                ),
            ],
            options={
                "db_table": "identity_deduplication_candidates",
            },
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["national_id"], name="identity_pe_nationa_ad8ca6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["phone_number"], name="identity_pe_phone_n_26c925_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["first_name", "last_name"],
                name="identity_pe_first_n_45991f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["birth_date"], name="identity_pe_birth_d_3ed639_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["city", "province"], name="identity_pe_city_52538f_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="personidentity",
            constraint=models.CheckConstraint(
                check=models.Q(("birth_date__lt", datetime.date(2025, 9, 18))),
                name="birth_date_must_be_past",
            ),
        ),
        migrations.AddConstraint(
            model_name="personidentity",
            constraint=models.CheckConstraint(
                check=models.Q(("household_size__gte", 1)),
                name="household_size_positive",
            ),
        ),
        migrations.AddIndex(
            model_name="familyrelationship",
            index=models.Index(
                fields=["person1", "relationship_type"],
                name="identity_fa_person1_21653c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="familyrelationship",
            index=models.Index(
                fields=["person2", "relationship_type"],
                name="identity_fa_person2_221cb5_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="familyrelationship",
            constraint=models.UniqueConstraint(
                fields=("person1", "person2", "relationship_type"),
                name="unique_relationship",
            ),
        ),
        migrations.AddConstraint(
            model_name="familyrelationship",
            constraint=models.CheckConstraint(
                check=models.Q(("person1", models.F("person2")), _negated=True),
                name="no_self_relationship",
            ),
        ),
        migrations.AddIndex(
            model_name="deduplicationcandidate",
            index=models.Index(
                fields=["similarity_score", "match_type"],
                name="identity_de_similar_6ddb9d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="deduplicationcandidate",
            index=models.Index(
                fields=["status", "detected_at"], name="identity_de_status_74d856_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="deduplicationcandidate",
            constraint=models.UniqueConstraint(
                fields=("person1", "person2"), name="unique_dedup_pair"
            ),
        ),
        migrations.AddConstraint(
            model_name="deduplicationcandidate",
            constraint=models.CheckConstraint(
                check=models.Q(("person1", models.F("person2")), _negated=True),
                name="different_persons_only",
            ),
        ),
    ]
